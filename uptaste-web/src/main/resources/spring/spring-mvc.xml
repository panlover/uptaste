<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!--JSR-303/JSR-349 support will be detected on classpath and enabled automatically-->
    <mvc:annotation-driven/>

    <!--
         - POJOs labeled with the @Controller and @Service annotations are auto-detected.
     -->
    <context:component-scan base-package="cn.uptaste"/>

    <!--  all resources inside folder src/main/webapp/resources are mapped so they can be refered to inside JSP files
        (see header.jsp for more details) -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
          p:basename="messages"/>

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- view name resolved using bean of type InternalResourceViewResolver (declared in mvc-view-config.xml) -->
        <property name="defaultErrorView" value="exception"/>
        <!-- results into 'WEB-INF/jsp/exception.jsp' -->
        <property name="warnLogCategory" value="warn"/>
        <!-- needed otherwise exceptions won't be logged anywhere -->
    </bean>
    <!--文件上传时使用到-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

    <!-- 获取本地 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>
    <!--
    - The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver and BeanNameViewResolver,
    - and uses the requested media type (determined by the path extension) to pick a matching view.
    - When the media type is 'text/html', it will delegate to the InternalResourceViewResolver's JstlView,
    - otherwise to the BeanNameViewResolver.
    -->
        <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
            <!--<property name="contentNegotiationManager" ref="cnManager"/>-->

            <property name="viewResolvers">
                <list>
                    <!-- Default viewClass: JSTL view (JSP with html output) -->
                    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                        <!-- Example: a logical view name of 'vets' is mapped to '/WEB-INF/jsp/vets.jsp' -->
                        <property name="prefix" value="/WEB-INF/"/>
                        <property name="suffix" value=".jsp"/>
                    </bean>

                    <!-- Used here for 'xml' and 'atom' views  -->
                    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
                </list>
            </property>
        </bean>

    <!-- Simple strategy: only path extension is taken into account -->
    <!--    <bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
            <property name="favorPathExtension" value="true"/>
            <property name="ignoreAcceptHeader" value="true"/>
            <property name="defaultContentType" value="text/html"/>

            <property name="mediaTypes">
                <map>
                    <entry key="html" value="text/html"/>
                    <entry key="xml" value="application/xml"/>
                    <entry key="atom" value="application/atom+xml"/>
                </map>
            </property>
        </bean>-->

</beans>